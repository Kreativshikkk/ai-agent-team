package com.example.agentteam.net

import com.intellij.openapi.project.Project
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.openapi.fileEditor.FileEditorManager
import com.intellij.openapi.vfs.LocalFileSystem
import java.io.File

/**
 * Generates Python code using the crewai library based on the TeamConfig.
 */
class PythonCrewGenerator(private val project: Project) {

    /**
     * Generates a Python file with crewai code based on the given TeamConfig.
     * @param config The TeamConfig containing the team configuration.
     * @return The generated Python file.
     */
    fun generatePythonFile(config: TeamConfig): VirtualFile {
        val pythonCode = generatePythonCode(config)
        val file = createPythonFile(pythonCode)
        openFileInEditor(file)
        return file
    }

    /**
     * Generates Python code using the crewai library based on the given TeamConfig.
     * @param config The TeamConfig containing the team configuration.
     * @return The generated Python code as a string.
     */
    private fun generatePythonCode(config: TeamConfig): String {
        val sb = StringBuilder()

        // Add imports
        sb.append("# Generated by AI Agent Team Builder\n")
        sb.append("from crewai import Agent, Crew, Process, Task\n\n")

        // Add agent definitions
        sb.append("# Define agents\n")

        // Team Leads
        for (i in 1..config.teamLeads) {
            val rolePrompt = config.rolePrompts["teamLead"] ?: "You are a Team Lead responsible for coordinating the team and ensuring the project is completed successfully."
            sb.append("""
                team_lead_${i} = Agent(
                    role="Team Lead",
                    goal="Coordinate the team and ensure the project is completed successfully",
                    backstory="${rolePrompt}",
                    verbose=True,
                    allow_delegation=True
                )
            """.trimIndent())
            sb.append("\n\n")
        }

        // Tech Leads
        for (i in 1..config.techLeads) {
            val rolePrompt = config.rolePrompts["techLead"] ?: "You are a Tech Lead responsible for making technical decisions and guiding the development team."
            sb.append("""
                tech_lead_${i} = Agent(
                    role="Tech Lead",
                    goal="Make technical decisions and guide the development team",
                    backstory="${rolePrompt}",
                    verbose=True,
                    allow_delegation=True
                )
            """.trimIndent())
            sb.append("\n\n")
        }

        // Engineers
        for (i in 1..config.engineers) {
            val rolePrompt = config.rolePrompts["engineer"] ?: "You are a Software Engineer responsible for implementing the technical solutions."
            sb.append("""
                engineer_${i} = Agent(
                    role="Software Engineer",
                    goal="Implement technical solutions",
                    backstory="${rolePrompt}",
                    verbose=True,
                    allow_delegation=False
                )
            """.trimIndent())
            sb.append("\n\n")
        }

        // QA Engineers
        for (i in 1..config.qaEngineers) {
            val rolePrompt = config.rolePrompts["qaEngineer"] ?: "You are a QA Engineer responsible for testing and ensuring the quality of the software."
            sb.append("""
                qa_engineer_${i} = Agent(
                    role="QA Engineer",
                    goal="Test and ensure the quality of the software",
                    backstory="${rolePrompt}",
                    verbose=True,
                    allow_delegation=False
                )
            """.trimIndent())
            sb.append("\n\n")
        }

        // Add task definitions
        sb.append("# Define tasks\n")
        sb.append("""
            task = Task(
                description="${config.task}",
                expected_output="Completed implementation of the required functionality",
                agent=team_lead_1 if ${config.teamLeads} > 0 else (tech_lead_1 if ${config.techLeads} > 0 else engineer_1)
            )
        """.trimIndent())
        sb.append("\n\n")

        // Add crew definition
        sb.append("# Define crew\n")
        sb.append("agents = [\n")

        // Add team leads to crew
        for (i in 1..config.teamLeads) {
            sb.append("    team_lead_$i,\n")
        }

        // Add tech leads to crew
        for (i in 1..config.techLeads) {
            sb.append("    tech_lead_$i,\n")
        }

        // Add engineers to crew
        for (i in 1..config.engineers) {
            sb.append("    engineer_$i,\n")
        }

        // Add QA engineers to crew
        for (i in 1..config.qaEngineers) {
            sb.append("    qa_engineer_$i,\n")
        }

        sb.append("]\n\n")

        // Create and run the crew
        sb.append("""
            crew = Crew(
                agents=agents,
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )

            # Run the crew
            result = crew.kickoff()
            print(result)
        """.trimIndent())

        return sb.toString()
    }

    /**
     * Creates a Python file with the given content.
     * @param content The content of the Python file.
     * @return The created VirtualFile.
     */
    private fun createPythonFile(content: String): VirtualFile {
        val basePath = project.basePath ?: throw IllegalStateException("Project base path is null")
        val pluginPythonDir = File(basePath, "src/main/resources/python")
        if (!pluginPythonDir.exists()) {
            pluginPythonDir.mkdirs()
        }

        // Generate a unique filename based on timestamp
        val timestamp = System.currentTimeMillis()
        val file = File(pluginPythonDir, "crew_ai_team_$timestamp.py")

        file.writeText(content)

        return LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
            ?: throw IllegalStateException("Failed to create Python file")
    }

    /**
     * Opens the given file in the editor.
     * @param file The file to open.
     */
    private fun openFileInEditor(file: VirtualFile) {
        FileEditorManager.getInstance(project).openFile(file, true)
    }
}
